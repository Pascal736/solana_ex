defmodule SolanaEx.Rpc.HttpMethods do
  alias SolanaEx.Rpc.Response

  def methods() do
    [
      {"get_account_info", [:pubkey], [:commitmet, :encoding, :dataslice, :min_context_slot], "getAccountInfo", Response.AccountInfo},
      {"get_balance", [:pubkey], [:commitment, :min_context_slot], "getBalance", Response.Balance},
      {"get_block", [:slot_number], [:commitment, :encoding, :max_supported_transaction_version, :transaction_details, :rewards], "getBlock", Response.Block},
      {"get_block_height", [], [:commitment, :min_context_slot], "getBlockHeight", Response.BlockHeight},
      {"get_block_commitment", [:block_height], [], "getBlockCommitment", Response.BlockCommitment},
      {"get_block_production", [], [:commitment, :range, :identity], "getBlockProduction", Response.BlockProduction},
      {"get_blocks", [:start_slot], [:end_slot, :commitment], "getBlocks", Response.Blocks},
      {"get_blocks_with_limit", [:start_slot, :limit], [:commitment], "getBlocksWithLimit", Response.BlocksWithLimit},
      {"get_block_time", [:block], [], "getBlockTime", Response.BlockTime},
      {"get_cluster_nodes", [], [], "getClusterNodes", Response.ClusterNodes},
      {"get_epoch_info", [], [:commitment, :min_context_slot], "getEpochInfo", Response.EpochInfo},
      {"get_epoch_schedule", [], [], "getEpochSchedule", Response.EpochSchedule},
      {"get_fee_for_message", [:message], [:commitment], "getFeeForMessage", Response.FeeForMessage},
      {"get_first_available_block", [], [], "getFirstAvailableBlock", Response.FirstAvailableBlock},
      {"get_genesis_hash", [], [], "getGenesisHash", Response.GenesisHash},
      {"get_health", [], [], "getHealth", Response.Health},
      {"get_highest_snapshot_slot", [], [], "getHighestSnapshotSlot", Response.HighestSnapshotSlot},
      {"get_identity", [], [], "getIdentity", Response.Identity},
      {"get_inflation_governor", [], [:commitment], "getInflationGovernor", Response.InflationGovernor},
      {"get_inflation_rate", [], [], "getInflationRate", Response.InflationRate},
      {"get_inflation_reward", [:addresses], [:commitment, :epoch, :min_context_slot], "getInflationReward", Response.InflationReward},
      {"get_largest_accounts", [], [:commitment, :filter], "getLargestAccounts", Response.LargestAccounts},
      {"get_latest_blockhash", [], [:commitment, :min_context_slot], "getLatestBlockhash", Response.LatestBlockhash},
      {"get_leader_schedule", [], [:slot, :commitment], "getLeaderSchedule", Response.LeaderSchedule},
      {"get_max_retransmit_slot", [], [], "getMaxRetransmitSlot", Response.MaxRetransmitSlot},
      {"get_max_shred_insert_slot", [], [], "getMaxShredInsertSlot", Response.MaxShredInsertSlot},
      {"get_minimum_balance_for_rent_exemption", [:account_data_len], [:commitment], "getMinimumBalanceForRentExemption", Response.MinimumBalanceForRentExemption},
      {"get_multiple_accounts", [:pubkey_array], [:commitment, :encoding, :dataslice], "getMultipleAccounts", Response.MultipleAccounts},
      {"get_program_accounts", [:program_id], [:commitment, :encoding, :dataslice, :filters, :with_context, :min_context_slot], "getProgramAccounts", Response.ProgramAccounts},
      {"get_recent_performance_samples", [], [:limit], "getRecentPerformanceSamples", Response.RecentPerformanceSamples},
      {"get_recent_prioritization_fees", [], [:accounts], "getRecentPrioritizationFees", Response.RecentPrioritizationFees},
      {"get_signatures_for_address", [:address], [:limit, :before, :until, :commitment, :min_context_slot], "getSignaturesForAddress", Response.SignaturesForAddress},
      {"get_signature_statuses", [:signature_array], [:search_transaction_history], "getSignatureStatuses", Response.SignatureStatuses},
      {"get_slot", [], [:commitment, :min_context_slot], "getSlot", Response.Slot},
      {"get_slot_leader", [], [:commitment, :min_context_slot], "getSlotLeader", Response.SlotLeader},
      {"get_slot_leaders", [:start_slot, :limit], [], "getSlotLeaders", Response.SlotLeaders},
      {"get_stake_minimum_delegation", [], [:commitment], "getStakeMinimumDelegation", Response.StakeMinimumDelegation},
      {"get_supply", [], [:commitment, :exclude_non_circulating_accounts_list], "getSupply", Response.Supply},
      {"get_token_account_balance", [:pubkey], [:commitment], "getTokenAccountBalance", Response.TokenAccountBalance},
      {"get_token_accounts_by_delegate", [:delegate], [:commitment, :encoding, :dataslice, :mint, :program_id], "getTokenAccountsByDelegate", Response.TokenAccountsByDelegate},
      {"get_token_accounts_by_owner", [:owner], [:commitment, :encoding, :dataslice, :mint, :program_id], "getTokenAccountsByOwner", Response.TokenAccountsByOwner},
      {"get_token_largest_accounts", [:mint], [:commitment], "getTokenLargestAccounts", Response.TokenLargestAccounts},
      {"get_token_supply", [:mint], [:commitment], "getTokenSupply", Response.TokenSupply},
      {"get_transaction", [:signature], [:commitment, :encoding, :max_supported_transaction_version], "getTransaction", Response.Transaction},
      {"get_transaction_count", [], [:commitment, :min_context_slot], "getTransactionCount", Response.TransactionCount},
      {"get_version", [], [], "getVersion", Response.Version},
      {"get_vote_accounts", [], [:commitment, :vote_pubkey, :keep_unstaked_delinquents, :delinquent_slot_distance], "getVoteAccounts", Response.VoteAccounts},
      {"is_blockhash_valid", [:blockhash], [:commitment, :min_context_slot], "isBlockhashValid", Response.BlockhashValid},
      {"minimum_ledger_slot", [], [], "minimumLedgerSlot", Response.MinimumLedgerSlot},
      {"request_airdrop", [:pubkey, :lamports], [:commitment], "requestAirdrop", Response.RequestAirdrop},
      {"send_transaction", [:transaction], [:skip_preflight, :preflight_commitment, :encoding, :max_retries, :min_context_slot], "sendTransaction", Response.SendTransaction},
      {"simulate_transaction", [:transaction],
       [
         :sig_verify,
         :commitment,
         :encoding,
         :replace_recent_blockhash,
         :accounts,
         :min_context_slot,
         :inner_instructions
       ], "simulateTransaction", Response.SimulateTransaction}
    ]
  end
end
